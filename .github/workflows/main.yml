name: Build & Release (iOS TestFlight)

on:
  workflow_dispatch:
    inputs:
      build-number:
        description: "Ghi đè build number (tuỳ chọn, ví dụ: 42)"
        required: false
      flavor:
        description: "Flutter flavor (tuỳ chọn, ví dụ: prod)"
        required: false
  push:
    tags:
      - "ios-v*"

jobs:
  build:
    name: Build iOS
    runs-on: macos-14
    env:
      # THAY bằng Bundle Identifier thực tế của app
      BUNDLE_ID: com.example.app

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Set up Xcode
        uses: maxim-lobanov/setup-xcode@v1
        with:
          xcode-version: "15.4"

      - name: Set up Flutter
        uses: subosito/flutter-action@v2
        with:
          channel: stable
          cache: true

      - name: Flutter doctor
        run: flutter doctor -v

      - name: Install dependencies
        run: flutter pub get

      - name: Validate required secrets early
        shell: bash
        env:
          IOS_CERT_P12_BASE64: ${{ secrets.IOS_CERT_P12_BASE64 }}
          IOS_CERT_PASSWORD: ${{ secrets.IOS_CERT_PASSWORD }}
          KEYCHAIN_PASSWORD: ${{ secrets.IOS_KEYCHAIN_PASSWORD }}
        run: |
          set -euo pipefail
          missing=0
          for var in IOS_CERT_P12_BASE64 IOS_CERT_PASSWORD KEYCHAIN_PASSWORD; do
            if [ -z "${!var:-}" ]; then
              echo "::error::Missing secret: $var"
              missing=1
            fi
          done
          if [ "$missing" -ne 0 ]; then
            echo "Some required secrets are missing. Note: secrets are not available to PRs from forks."
            exit 1
          fi
          # In ra độ dài để kiểm tra rỗng/trim mà không lộ dữ liệu
          echo "len(IOS_CERT_P12_BASE64)=${#IOS_CERT_P12_BASE64}"
          echo "len(IOS_CERT_PASSWORD)=${#IOS_CERT_PASSWORD}"
          echo "len(KEYCHAIN_PASSWORD)=${#KEYCHAIN_PASSWORD}"

      # Giải mã .p12 an toàn trên macOS (openssl base64 -d -A) + kiểm tra bằng openssl pkcs12
      - name: Decode and verify .p12
        shell: bash
        env:
          IOS_CERT_P12_BASE64: ${{ secrets.IOS_CERT_P12_BASE64 }}
          IOS_CERT_PASSWORD: ${{ secrets.IOS_CERT_PASSWORD }}
        run: |
          set -euo pipefail
          CERTIFICATE_PATH="$RUNNER_TEMP/build_certificate.p12"

          # Loại bỏ CR/LF, decode bằng OpenSSL (tương thích BSD)
          printf '%s' "$IOS_CERT_P12_BASE64" | tr -d '\r\n' | /usr/bin/openssl base64 -d -A -out "$CERTIFICATE_PATH"

          # Kiểm tra kích thước và loại file
          wc -c "$CERTIFICATE_PATH"
          file "$CERTIFICATE_PATH" || true

          # Xác thực mật khẩu + tính toàn vẹn PKCS#12 trước khi import
          # Nếu sai mật khẩu hoặc file hỏng => bước này sẽ fail (giúp bắt lỗi sớm hơn Security)
          /usr/bin/openssl pkcs12 -in "$CERTIFICATE_PATH" -noout -info -passin pass:"$IOS_CERT_PASSWORD"

      # Tạo keychain có mật khẩu + import .p12 + cấp quyền công cụ
      - name: Install Apple certificate into temporary keychain
        shell: bash
        env:
          IOS_CERT_PASSWORD: ${{ secrets.IOS_CERT_PASSWORD }}
          KEYCHAIN_PASSWORD: ${{ secrets.IOS_KEYCHAIN_PASSWORD }}
        run: |
          set -euo pipefail
          CERTIFICATE_PATH="$RUNNER_TEMP/build_certificate.p12"
          KEYCHAIN_PATH="$RUNNER_TEMP/app-signing.keychain-db"

          # Tạo keychain có mật khẩu và mở khoá
          security create-keychain -p "$KEYCHAIN_PASSWORD" "$KEYCHAIN_PATH"
          security set-keychain-settings -lut 21600 "$KEYCHAIN_PATH"
          security unlock-keychain -p "$KEYCHAIN_PASSWORD" "$KEYCHAIN_PATH"

          # Import .p12 (không dùng -t cert; -f pkcs12 là đủ)
          security import "$CERTIFICATE_PATH" \
            -k "$KEYCHAIN_PATH" \
            -P "$IOS_CERT_PASSWORD" \
            -f pkcs12 \
            -A \
            -T /usr/bin/codesign \
            -T /usr/bin/security \
            -T /usr/bin/xcodebuild

          # Cho phép tool truy cập private key (tránh "User interaction is not allowed")
          security set-key-partition-list -S apple-tool:,apple: -s -k "$KEYCHAIN_PASSWORD" "$KEYCHAIN_PATH"

          # Thêm keychain tạm vào search list cùng login để Xcode tìm được tất cả
          CURRENT_LIST=$(security list-keychains -d user | sed 's/[[:space:]]*"//g; s/"[[:space:]]*//g')
          security list-keychains -d user -s "$KEYCHAIN_PATH" $CURRENT_LIST

          # Kiểm tra identity đã vào keychain
          security find-identity -v -p codesigning "$KEYCHAIN_PATH" || true

      - name: Download provisioning profile (App Store)
        uses: apple-actions/download-provisioning-profiles@v1
        with:
          bundle-id: ${{ env.BUNDLE_ID }}
          profile-type: IOS_APP_STORE
          issuer-id: ${{ secrets.APPSTORE_ISSUER_ID }}
          api-key-id: ${{ secrets.APPSTORE_KEY_ID }}
          api-private-key: ${{ secrets.APPSTORE_PRIVATE_KEY }}

      - name: Pod install (iOS)
        run: |
          cd ios
          pod install --repo-update
          cd ..

      - name: Create ExportOptions.plist
        run: |
          cat > ExportOptions.plist <<'EOF'
          <?xml version="1.0" encoding="UTF-8"?>
          <!DOCTYPE plist PUBLIC "-//Apple//DTD PLIST 1.0//EN" "http://www.apple.com/DTDs/PropertyList-1.0.dtd">
          <plist version="1.0">
          <dict>
            <key>method</key>
            <string>app-store</string>
            <key>signingStyle</key>
            <string>automatic</string>
            <key>destination</key>
            <string>export</string>
            <key>manageAppVersionAndBuildNumber</key>
            <true/>
          </dict>
          </plist>
          EOF

      - name: Build iOS (IPA)
        env:
          CI: true
        run: flutter build ipa --release --export-options-plist=ExportOptions.plist

      - name: Upload IPA artifact
        uses: actions/upload-artifact@v4.3.3
        with:
          name: ios-ipa
          path: build/ios/ipa/*.ipa

      - name: Clean up temporary keychain
        if: ${{ always() }}
        run: |
          security delete-keychain "$RUNNER_TEMP/app-signing.keychain-db" || true

  release:
    name: Upload IPA to TestFlight
    needs: [build]
    runs-on: macos-14
    steps:
      - name: Download IPA artifact
        uses: actions/download-artifact@v4.1.7
        with:
          name: ios-ipa
          path: build
          merge-multiple: true

      - name: Install App Store Connect API key (.p8)
        env:
          APPSTORE_KEY_ID: ${{ secrets.APPSTORE_KEY_ID }}
          APPSTORE_PRIVATE_KEY: ${{ secrets.APPSTORE_PRIVATE_KEY }}
        run: |
          set -euo pipefail
          mkdir -p ~/private_keys
          printf '%s' "$APPSTORE_PRIVATE_KEY" > ~/private_keys/AuthKey_${APPSTORE_KEY_ID}.p8

      - name: Upload to App Store (TestFlight)
        env:
          APPSTORE_KEY_ID: ${{ secrets.APPSTORE_KEY_ID }}
          APPSTORE_ISSUER_ID: ${{ secrets.APPSTORE_ISSUER_ID }}
        run: |
          set -euo pipefail
          xcrun altool --upload-app \
            --type ios \
            -f build/ios/ipa/*.ipa \
            --apiKey "$APPSTORE_KEY_ID" \
            --apiIssuer "$APPSTORE_ISSUER_ID"
